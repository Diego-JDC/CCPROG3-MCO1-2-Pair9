import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;

public class MaintenanceMenu extends javax.swing.JFrame{
    public MaintenanceMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        Title = new javax.swing.JLabel();
        options = new javax.swing.JPanel();
        addItemBtn = new javax.swing.JButton();
        collectBtn = new javax.swing.JButton();
        setPriceBtn = new javax.swing.JButton();
        replenishBtn = new javax.swing.JButton();
        summaryBtn = new javax.swing.JButton();
        currentIncome = new javax.swing.JLabel();
        change = new javax.swing.JLabel();
        Parent = new javax.swing.JPanel();
        replenishChange = new javax.swing.JPanel();
        replenishMoney = new javax.swing.JTextField();
        inputR = new javax.swing.JLabel();
        confirmChange = new javax.swing.JButton();
        setItemPrice = new javax.swing.JPanel();
        inputPrice = new javax.swing.JTextField();
        itemList = new javax.swing.JComboBox<>();
        submitBtn = new javax.swing.JButton();
        currentPrice = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        collectPanel = new javax.swing.JPanel();
        collectedAmt = new javax.swing.JLabel();
        collectedLabel = new javax.swing.JLabel();
        confirmCollect = new javax.swing.JButton();
        AddRestockMenu = new javax.swing.JPanel();
        restockItemList = new javax.swing.JComboBox<>();
        CurrentStock = new javax.swing.JLabel();
        inputStock = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        restockBtn = new javax.swing.JButton();
        currentItemStock = new javax.swing.JLabel();
        AddItemsMenu = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        addMessage = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        caloriesField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        ingBtn = new javax.swing.JRadioButton();
        regBtn = new javax.swing.JRadioButton();
        newNameLabel = new javax.swing.JLabel();
        caloriesLabel = new javax.swing.JLabel();
        newPrice = new javax.swing.JLabel();
        typeBox = new javax.swing.JComboBox<>();
        typeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SummaryTable = new javax.swing.JTable();
        addMenuOptions = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        optionAddBtn = new javax.swing.JButton();
        optionRestockBtn = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Title.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Maintenance");

        addItemBtn.setText("Add New Items / Restock");
        addItemBtn.setFocusable(false);

        collectBtn.setText("Collect Income");
        collectBtn.setFocusable(false);

        setPriceBtn.setText("Set Item Price");
        setPriceBtn.setFocusable(false);

        replenishBtn.setText("Replenish Change");
        replenishBtn.setFocusable(false);

        summaryBtn.setText("Transaction Summary");
        summaryBtn.setFocusable(false);

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(replenishBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(summaryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setPriceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        optionsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addItemBtn, collectBtn, replenishBtn, setPriceBtn, summaryBtn});

        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addItemBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(collectBtn)
                .addGap(22, 22, 22)
                .addComponent(setPriceBtn)
                .addGap(22, 22, 22)
                .addComponent(replenishBtn)
                .addGap(22, 22, 22)
                .addComponent(summaryBtn)
                .addGap(22, 22, 22))
        );

        optionsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addItemBtn, collectBtn, replenishBtn, setPriceBtn, summaryBtn});

        currentIncome.setText("Current Income:");

        change.setText("Change:");

        Parent.setLayout(new java.awt.CardLayout());

        inputR.setText("Input new change amount:");

        confirmChange.setText("Set Change");
        confirmChange.setFocusable(false);
        confirmChange.setOpaque(true);

        javax.swing.GroupLayout replenishChangeLayout = new javax.swing.GroupLayout(replenishChange);
        replenishChange.setLayout(replenishChangeLayout);
        replenishChangeLayout.setHorizontalGroup(
            replenishChangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(replenishChangeLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(replenishChangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmChange)
                    .addComponent(replenishMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputR, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        replenishChangeLayout.setVerticalGroup(
            replenishChangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(replenishChangeLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(inputR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replenishMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmChange)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        Parent.add(replenishChange, "card2");

        submitBtn.setText("Set Price");
        submitBtn.setFocusable(false);

        priceLabel.setText("Input new price:");

        javax.swing.GroupLayout setItemPriceLayout = new javax.swing.GroupLayout(setItemPrice);
        setItemPrice.setLayout(setItemPriceLayout);
        setItemPriceLayout.setHorizontalGroup(
            setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setItemPriceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitBtn)
                    .addGroup(setItemPriceLayout.createSequentialGroup()
                        .addGroup(setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(currentPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(itemList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        setItemPriceLayout.setVerticalGroup(
            setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setItemPriceLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setItemPriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitBtn)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        Parent.add(setItemPrice, "card3");

        collectedLabel.setText("Collected income:");

        confirmCollect.setText("Confirm");

        javax.swing.GroupLayout collectPanelLayout = new javax.swing.GroupLayout(collectPanel);
        collectPanel.setLayout(collectPanelLayout);
        collectPanelLayout.setHorizontalGroup(
            collectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(collectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collectedAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmCollect)
                    .addComponent(collectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        collectPanelLayout.setVerticalGroup(
            collectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collectPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(collectedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(collectedAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmCollect)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        Parent.add(collectPanel, "card4");

        jLabel1.setText("Input stock amount:");

        restockBtn.setText("Restock");

        currentItemStock.setText("Current item stock:");

        javax.swing.GroupLayout AddRestockMenuLayout = new javax.swing.GroupLayout(AddRestockMenu);
        AddRestockMenu.setLayout(AddRestockMenuLayout);
        AddRestockMenuLayout.setHorizontalGroup(
            AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddRestockMenuLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AddRestockMenuLayout.createSequentialGroup()
                        .addGroup(AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(inputStock, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addComponent(restockBtn))
                        .addGap(145, 145, 145))
                    .addGroup(AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(AddRestockMenuLayout.createSequentialGroup()
                            .addComponent(restockItemList, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(currentItemStock, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(CurrentStock, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        AddRestockMenuLayout.setVerticalGroup(
            AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddRestockMenuLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(CurrentStock, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddRestockMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restockItemList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentItemStock))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addComponent(inputStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(restockBtn)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        Parent.add(AddRestockMenu, "card6");

        addBtn.setText("Add");
        addBtn.setFocusable(false);

        ingBtn.setText("Ingredient");
        ingBtn.setFocusable(false);

        regBtn.setText("Regular");
        regBtn.setFocusable(false);

        newNameLabel.setText("Name");

        caloriesLabel.setText("Calories");

        newPrice.setText("Price");

        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Topping", "Powder Topping", "Food Color", "Flavor Extract" }));

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        typeLabel.setText("Choose type of ingredient");

        javax.swing.GroupLayout AddItemsMenuLayout = new javax.swing.GroupLayout(AddItemsMenu);
        AddItemsMenu.setLayout(AddItemsMenuLayout);
        AddItemsMenuLayout.setHorizontalGroup(
            AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddItemsMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddItemsMenuLayout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddItemsMenuLayout.createSequentialGroup()
                        .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(caloriesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caloriesField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(AddItemsMenuLayout.createSequentialGroup()
                        .addComponent(ingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(regBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(118, 118, 118))
            .addGroup(AddItemsMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AddItemsMenuLayout.setVerticalGroup(
            AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddItemsMenuLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caloriesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caloriesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPrice))
                .addGap(18, 18, 18)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ingBtn)
                    .addComponent(regBtn))
                .addGap(3, 3, 3)
                .addGroup(AddItemsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeLabel))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        Parent.add(AddItemsMenu, "card7");

        SummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Init Qty", "Amt Sold", "Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SummaryTable);
        if (SummaryTable.getColumnModel().getColumnCount() > 0) {
            SummaryTable.getColumnModel().getColumn(0).setResizable(false);
            SummaryTable.getColumnModel().getColumn(1).setResizable(false);
            SummaryTable.getColumnModel().getColumn(2).setResizable(false);
            SummaryTable.getColumnModel().getColumn(3).setResizable(false);
        }

        Parent.add(jScrollPane1, "card5");

        jLabel2.setText("Would you like to add or restock an item?");

        optionAddBtn.setText("Add Item");

        optionRestockBtn.setText("Restock");

        javax.swing.GroupLayout addMenuOptionsLayout = new javax.swing.GroupLayout(addMenuOptions);
        addMenuOptions.setLayout(addMenuOptionsLayout);
        addMenuOptionsLayout.setHorizontalGroup(
            addMenuOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMenuOptionsLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(addMenuOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addMenuOptionsLayout.createSequentialGroup()
                        .addComponent(optionAddBtn)
                        .addGap(28, 28, 28)
                        .addComponent(optionRestockBtn)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        addMenuOptionsLayout.setVerticalGroup(
            addMenuOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMenuOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMenuOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optionAddBtn)
                    .addComponent(optionRestockBtn))
                .addContainerGap(161, Short.MAX_VALUE))
        );

        Parent.add(addMenuOptions, "card8");

        back.setText("Back");
        back.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(currentIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addComponent(Title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Parent, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(back)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentIncome)
                    .addComponent(change))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(back))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Parent, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>

    /**
     * Resets the combo box list
     */

    public void resetList(){
        itemList.removeAllItems();
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setPriceBtn(ActionListener e){
        setPriceBtn.addActionListener(e);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setReplenishBtn(ActionListener e){
        replenishBtn.addActionListener(e);
    }

    /**
     * Shows the price menu
     */
    
    public void showPriceMenu(){
        Parent.removeAll();
        Parent.add(setItemPrice);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Shows the replenish change menu
     */

    public void showReplenish(){
        Parent.removeAll();
        Parent.add(replenishChange);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Shows collect income menu
     */

    public void showCollect(){
        Parent.removeAll();
        Parent.add(collectPanel);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Sets the combo box to display item names
     * @param list
     */

    public void setItemList(ArrayList<Slot> list){
        DefaultComboBoxModel<Slot> model = new DefaultComboBoxModel<>();

        for (Slot s : list) {
            model.addElement(s);
        }
        itemList.setModel(model);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setItemListBtn(ActionListener e){
        itemList.addActionListener(e);
    }

    /**
     * Gets selected item in combo box
     * @return Slot object
     */

    public Slot getSelected(){
        return (Slot) itemList.getSelectedItem();
    }

    /**
     * Updates current price of an item
     * @param price price of current item selected
     */

    public void setPriceLabel(int price){
        currentPrice.setText("Current price: " + price + ".00 PHP");
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setSubmitBtn(ActionListener e){
        submitBtn.addActionListener(e);
    }

    /**
     * Gets text field input
     * @return price input of user
     */

    public int getInput(){
        String s = inputPrice.getText();
        return Integer.parseInt(s);
    }

    /**
     * Clears text field
     */

    public void clearField(){
        inputPrice.setText("");
        replenishMoney.setText("");
    }

    /**
     * Sets the current income label
     * @param income current income of vending machine
     */

    public void setIncomeLabel(int income){
        currentIncome.setText("Current income : " + income);
    }

    /**
     * Sets the amount of change
     * @param amount change in the vending machine
     */

    public void setChangeLabel(int amount){
        inputR.setText("Change : " + amount + ".00 PHP");
        change.setText("Change : " + amount + ".00 PHP");
    }

    /**
     * Gets replenish amount inputted by user
     * @return amount to be replenished
     */

    public int getReplenishAmt(){
        String s = replenishMoney.getText();
        return Integer.parseInt(s);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setChangeBtn(ActionListener e){
        confirmChange.addActionListener(e);
    }

    /**
     * Hides all panels
     */

    public void hideAll(){
        Parent.removeAll();
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setCollectBtn(ActionListener e){
        collectBtn.addActionListener(e);
    }

    /**
     * Shows current income for collect income menu
     */

    public void collectedIncomeLabel(int income){
        collectedLabel.setText("Current income : " + income + ".00 PHP");
    }

    /**
     * Shows collected income message
     * @param income income from vending machine
     */

    public void collectedAmt(int income){
        collectedAmt.setVisible(true);
        collectedAmt.setText("Successfully collected " + income + ".00 PHP");
    }

    /**
     * Update current income label
     * @param n current income of vending machine
     */

    public void setCurrentIncome(int n){
        currentIncome.setText("Current Income : " + n + ".00 PHP");
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setBack(ActionListener e){
        back.addActionListener(e);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setConfirm(ActionListener e){
        confirmCollect.addActionListener(e);
    }

    /**
     * Show transaction summary
     */

    public void showTransactionMenu(){
        Parent.removeAll();
        Parent.add(jScrollPane1);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setSummaryBtn(ActionListener e){
        summaryBtn.addActionListener(e);
    }

    /**
     * Sets up the table for the transaction summary
     * @param vm is the current VendingMachine instnace
     */
    public void setTable(VendingMachine vm){
        DefaultTableModel table = (DefaultTableModel) SummaryTable.getModel();
        ArrayList<Slot> allItems = new ArrayList<Slot>();

        for(Slot s : vm.getInventory()){
            allItems.add(s);
        }

        if(vm instanceof SpecialVM){
            for(Slot s : ((SpecialVM)vm).getSpecialInventory()){
                allItems.add(s);
            }
        }

        for(Slot s : allItems){

            if(s.getItemList().size() - 1 == 0){
                table.addRow(new Object[]{s.getName(), s.getInitQuantity(), s.getInitQuantity() + 1 - s.getItemList().size(), (s.getInitQuantity() + 1 - s.getItemList().size()) * s.getPrice() + ".00 PHP"});
            }
            
            else{
                String itemName = s.getName();
                int initQuantity = s.getInitQuantity();
                int amtSold = s.getInitQuantity() + 1 - s.getItemList().size();
                if(s.getName().equals("Shaved Ice")) {
                    amtSold = s.getInitQuantity() + 2 - s.getItemList().size();
                }
                
                int profit = amtSold * s.getPrice();
    
                table.addRow(new Object[]{itemName, initQuantity, amtSold, profit + ".00 PHP"});
            }
        }
    }

    /**
     * Hides collected income message
     */

    public void hideCollectMsg(){
        collectedAmt.setVisible(false);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setAddBtn(ActionListener e){
        addItemBtn.addActionListener(e);
    }

    /**
     * Shows the options when add/restocking button is clicked
     */

    public void showAddMenuOptions(){
        Parent.removeAll();
        Parent.add(addMenuOptions);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setOptionAddBtn(ActionListener e){
        optionAddBtn.addActionListener(e);
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setOptionRestockBtn(ActionListener e){
        optionRestockBtn.addActionListener(e);
    }

    /**
     * Shows the add item menu
     */
    
    public void showAddMenu(){
        AddItemsMenu.setVisible(true);
    }

    /**
     * Shows restock item menu
     */

    public void showRestockMenu(){
        Parent.removeAll();
        Parent.add(AddRestockMenu);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Sets up the list of items in each slot
     * @param list slots in the vending machine
     */

    public void setRestockItemList(ArrayList<Slot> list){
        DefaultComboBoxModel<Slot> model = new DefaultComboBoxModel<>();

        for (Slot s : list) {
            model.addElement(s);
        }
        restockItemList.setModel(model);
    }

    public void setTypeList(ArrayList<String> list) {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        for(String type : list) {
            model.addElement(type);
        }
        typeBox.setModel(model);
    }

    public JComboBox<String> getTypeList() {
        return this.typeBox;
    }

    public void setTypeListAL(ActionListener e) {
        typeBox.addActionListener(e);
    }

    public String getTypeSelected() {
        return (String)typeBox.getSelectedItem();
    }

    public void setIngBtn(ActionListener e) {
        ingBtn.addActionListener(e);
    }

    /**
     * Gets ingBtn
     * @return JRadioButton
     */

    public JRadioButton getIngBtn(){
        return ingBtn;
    }

    /**
     * Gets regBtn
     * @return JRadioButton
     */

    public JRadioButton getRegBtn(){
        return regBtn;
    }

    /**
     * Shows add items menu
     */

    public void showAddItemsMenu(){
        Parent.removeAll();
        Parent.add(AddItemsMenu);
        Parent.revalidate();
        Parent.repaint();
    }

    /**
     * Sets the action listner
     * @param e action listener created from controller
     */

    public void setAddItemBtn(ActionListener e){
        addBtn.addActionListener(e);
    }

    /**
     * Gets the new name of the item
     * @return name of item
     */

    public String getNewItemName(){
        return nameField.getText();
    }

    /**
     * Gets the new calories
     * @return new calorie count
     */

    public int getNewCalories(){
        return Integer.parseInt(caloriesField.getText());
    }

    /**
     * Gets the new item price
     * @return new item price
     */

    public int getNewPrice(){
        return Integer.parseInt(priceField.getText());
    }

    /**
     * Resets all fields in add item menu
     */

    public void resetAddItemFields(){
        nameField.setText("");
        caloriesField.setText("");
        priceField.setText("");
    }

    /**
     * Shows the add item message
     */

    public void showAddMessage(){
        addMessage.setText("Success!");
    }

    /**
     * Hides message in add item
     */

    public void hideAddMessage(){
        addMessage.setText("");
    }

    /**
     * Gets the current selected slot in restock menu
     * @return slot object
     */

    public Slot getSelectedRestock(){
        return (Slot) restockItemList.getSelectedItem();
    }

    /**
     * Sets current stock label
     * @param stock of item
     */

    public void setCurrentStock(int stock){
        currentItemStock.setText("Current item stock : " + stock);
    }

    public void setRestockList(ActionListener e){
        restockItemList.addActionListener(e);
    }

    public void setRestockBtn(ActionListener e){
        restockBtn.addActionListener(e);
    }

    public int getInputStock(){
        return Integer.parseInt(inputStock.getText());
    }

    public void clearStockField(){
        inputStock.setText("");
    }

    public JLabel getTypeLbl() {
        return this.typeLabel;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel AddItemsMenu;
    private javax.swing.JPanel AddRestockMenu;
    private javax.swing.JLabel CurrentStock;
    private javax.swing.JPanel Parent;
    private javax.swing.JTable SummaryTable;
    private javax.swing.JLabel Title;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addItemBtn;
    private javax.swing.JPanel addMenuOptions;
    private javax.swing.JLabel addMessage;
    private javax.swing.JButton back;
    private javax.swing.JTextField caloriesField;
    private javax.swing.JLabel caloriesLabel;
    private javax.swing.JLabel change;
    private javax.swing.JButton collectBtn;
    private javax.swing.JPanel collectPanel;
    private javax.swing.JLabel collectedAmt;
    private javax.swing.JLabel collectedLabel;
    private javax.swing.JButton confirmChange;
    private javax.swing.JButton confirmCollect;
    private javax.swing.JLabel currentIncome;
    private javax.swing.JLabel currentItemStock;
    private javax.swing.JLabel currentPrice;
    private javax.swing.JRadioButton ingBtn;
    private javax.swing.JTextField inputPrice;
    private javax.swing.JLabel inputR;
    private javax.swing.JTextField inputStock;
    private javax.swing.JComboBox<Slot> itemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel newNameLabel;
    private javax.swing.JLabel newPrice;
    private javax.swing.JButton optionAddBtn;
    private javax.swing.JButton optionRestockBtn;
    private javax.swing.JPanel options;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JRadioButton regBtn;
    private javax.swing.JButton replenishBtn;
    private javax.swing.JPanel replenishChange;
    private javax.swing.JTextField replenishMoney;
    private javax.swing.JButton restockBtn;
    private javax.swing.JComboBox<Slot> restockItemList;
    private javax.swing.JPanel setItemPrice;
    private javax.swing.JButton setPriceBtn;
    private javax.swing.JButton submitBtn;
    private javax.swing.JButton summaryBtn;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration
}
